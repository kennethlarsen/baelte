"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  render: true,
  cleanup: true,
  act: true
};
exports.act = act;
exports.cleanup = exports.render = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _dom = require("@testing-library/dom");

Object.keys(_dom).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dom[key];
    }
  });
});

var _svelte = require("svelte");

const mountedContainers = new Set();

const render = (Component, _ref = {}) => {
  let {
    target
  } = _ref,
      options = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["target"]);

  if (!target) {
    target = document.body.appendChild(document.createElement('div'));
  }

  const ComponentConstructor = Component.default || Component;
  const component = new ComponentConstructor((0, _extends2.default)({}, options, {
    target
  }));
  mountedContainers.add({
    target,
    component
  });
  return (0, _extends2.default)({
    component,
    // eslint-disable-next-line no-console
    debug: (el = document.body) => console.log((0, _dom.prettyDOM)(el)),
    container: document.body
  }, (0, _dom.getQueriesForElement)(document.body));
};

exports.render = render;

const cleanupAtContainer = container => {
  const {
    target,
    component
  } = container;
  component.$destroy();
  /* istanbul ignore else  */

  if (target.parentNode === document.body) {
    document.body.removeChild(target);
  }

  mountedContainers.delete(container);
};

const cleanup = () => {
  mountedContainers.forEach(cleanupAtContainer);
};

exports.cleanup = cleanup;

function act(fn) {
  const returnValue = fn();

  if (returnValue !== undefined && typeof returnValue.then === 'function') {
    return returnValue.then(() => (0, _svelte.tick)());
  }

  return (0, _svelte.tick)();
}